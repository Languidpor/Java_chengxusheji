1、面向对象的特点：继承、封装、多态、(抽象)

2、继承：通过extends关键字来表示父子类之间的继承关系。子类继承了父类的属性和
方法，同时子类还可以拓展自己拥有的属性和方法。继承的单一的关系，只能单继承，
不能多继承，但是一个父类可以有若干个子类。

1)子类对于父类的构造，只能通过关键字super来调用，无法继承。
2)如果子类没有调用父类的构造，编译器会默认的加上对于父类的无参构造的调用，
如果此时父类没有无参构造，就会报错。

也就是说，创建子类的对象的时候，会执行子类的构造，执行子类的构造就必须
执行一下父类的构造。

为什么创建子类的对象，还必须要执行一下父类的构造？？

因为：执行一下父类的构造，才能妥善的处理父类的那些属性。

3、父类的引用指向子类的对象时，只能通过这个引用操作这个对象从父类继承
过来的那些属性和方法，对于子类自己拓展出来的属性和方法是没有办法操作的。

继承的意义：减少了代码量，程序的类结构清晰，可读性较高，便于维护和升级。

4、重写(覆盖)
子类把继承自父类的方法进行的重新实现。
子类中定义的和父类中同名、同参、同返回值类型的方法的现象，叫做重写， 也较覆盖。
1)子类的方法和父类的方法名称相同
2)子类的方法和父类的方法的参数必须相同(个数、类型、顺序)
3)子类的访问控制修饰符不能比父类更封闭
4)返回值类型必须相同
5)子类的方法不能抛出新的异常，或者抛出的异常不能比父类更宽泛，可以抛出更少，
或者不抛出，这些异常只针对于检查异常，至于运行时异常及其子异常不受限制。

重写的意义：子类、父类都具备某一个功能，只是实现的方式不同，一般情况下，如果父类
的方法完全能够符合子类需要的逻辑，那子类就不需要重写了，直接调用就行了。

思考题：当父类引用指向子类对象时，调用父类的方法，是调用父类定义的呢？还是调用
子类重写之后的呢？
调用的是重写之后的方法。

重写的现象是多态的一种表现形式。

5、多态，多种状态，分为两层含义
5.1、对象的多态：一个对象有多种状态，可以当作父类对象来看待，也可以当作其本类对象
来看待，当作父类对象来看待时，其实就是父类引用指向子类对象，这种现象也叫做"向上造型"。

5.2、方法的多态：若一个类中有多个方法的重载，在调用的时候根据传参不同就调用
不同的方法，就好像调用了一个方法的多个实现方式，也就是方法的多个状态。


任务：思考和利用自己的语言总结：继承、重写、多态、向上造型。。。






