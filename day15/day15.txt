1、面向对象的特点：继承、封装、多态、(抽象)

封装：
抽象：抽象出一个类的过程中(创建类的过程),只考虑那些与业务有关系的因素，
不用去理会那些和业务无关的因素。

2、访问控制修饰符
public protected  default(不写)  private

位置：本类中    同一个包     不同的包   子类(同包和不同包)

2.1、private修饰的成员 (类的属性)和方法，只能在本类中使用。
     private修饰的内容是对内提供的，如果公开了就会增加维护的成本。
     
2.2、public修饰的成员和方法，在任何的位置都可以访问。
     public修饰的内容是对外提供的可被调用的，需要相对的健壮。
     
2.3、protected修饰的成员和方法，可以被子类以及同一个包下的所有的类调用。
     练习任务：测试不同的包的子类，对于父类的protected修饰的内容能否访问。
     
2.4、default修饰的成员和方法，可以被同一个包下面的类调用。

修饰符           本类        同包      子类        不同包
public      可           可          可           可
protected   可           可          可           不
default     可           可          不           不
private     可           不          不           不

说明：在一个.java文件中，只能有一个public修饰的类，且和文件同名。
如果这个文件中还有其他的类，使用default修饰。

总结：
1）方法可以用不同的访问控制修饰符修饰，一般对内提供的方法使用private。
2）成员，尽可能的用private，这样做才能更好的封装。
3）适当的提供操作属性的方法。
4）不建议使用非公开的类，也就是说类都要公开，一个.java源文件只有一个类
    
3、setter和getter
Java类中的两种方法，以提供对某一个属性的设置和访问的入口。get和set并不一定
就是直接返回这个属性和对这个属性直接赋值，可以是经过加密的操作。
细节：命名规范，set属性名(形参)   get属性名()，采用驼峰命名法。
对于boolean类型的属性的get方法，也可以使用   is属性名()

4、instanceof关键字
子类可以自动的转化为父类，父类转换为子类的时候，需要强转，
如果转换不了(这个父类的引用指向的对象不是该子类类型的对象)，就会报错
instanceof关键字可以判断某一个引用指向的对象，是不是某一个类的一个对象。
语法：
引用 instanceof 类型，返回值为boolean

5、static关键字
可以修饰属性，方法，代码块，类
5.1、修饰属性：表示该属性是类级别的资源，是对全体对象共享的资源，静态属性
在类加载的时候初始化。

5.2、方法：该方法是类级别的方法，一般用作工具方法，在类加载之后可以直接调用。
System.arraycopy()   Math.random()

5.3、代码块
语法：static{}，静态代码块，在类加载的时候执行一次，以后在创建对象的过程中，
不会再执行。一般用做一些静态资源的初始化，如配置文件。

代码块
语法：{},在每一次创建对象的过程中都会执行，类似于构造。所以一般很少见。

5.4、修饰类（等到讲内部类的时候，再讲）
 
 思考题：在静态代码块，或静态方法中，不能访问非静态的属性。
 
6、final关键字
可以修饰类，方法，变量(方法中的局部变量，方法的形参，类的成员变量)
6.1、修饰类
final修饰的类，不可以被继承，Java中的String，Math等都是final修饰的。
这样的设计，就可以保证final的类中的那些方法不会被重写，也就是不会被乱改逻辑。
在实际的开发过程中，原则上不允许使用final修饰类，因为一些框架"Spring Hibernate Struts"
都是使用了“动态代理机制”，如果使用final修饰类，就会影响这些机制。

6.2、方法
final修饰的方法不可以被重写，项目开发中原则上也不允许使用，原因也是“动态代理机制”。

6.3、变量
final修饰的变量，在初始化之后就不允许被更改。









