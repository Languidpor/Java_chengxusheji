一个类，当程序员没有写构造时，编译器默认的提供一个空的构造。
但是当程序员给了一个有参构造时，编译器默认提供的那个空构造就不提供了。
java为什么这个设计???。
为什么提供一个默认的空构造：保证创建对象语法通过的同时，编译器默认的认为此对象
创建的逻辑就是不需要参数，其属性就是使用默认值。
为什么程序员声明了有参构造后，编译器就不再提供无参构造了：编译器认为在具体的业务
中创建对象的逻辑就是程序指定的有参构造，这个时候提供的无参构造会和业务有冲突。

1、对象实例化过程
计算机运行java程序时，内存开辟一块栈(stack)空间，同时开辟一块堆(heap)空间。
栈：存储引用类型变量，还存储基本类型的对象(后面讲)
堆：存储具体的对象

计算机还会开辟一块方法区的内存空间，用于存储类的基本信息，首先通过类装载器载入
类的字节码信息，经过解析之后存入方法区，类的信息包括类名、属性、方法等。

栈stack：是一种数据结构，特点是先进后出。
堆heap：理解为一盘散沙，随处存放
Book book = new Book();

2、重载
定义：在同一个类中，方法名相同，参数列表不同(参数的个数、参数的类型、参数顺序)的现象叫做重载。
重载体现了功能的不同实现方式，重载的方法可以相互调用,重载不考虑返回值类型.

打：打架，打牌，打麻将，打酱油，打电话，打下手... ...
喝：喝水，喝酒，喝西北风

3、方法签名
方法 = 访问控制修饰符 + 返回值类型 + 方法名 + 参数列表 + 方法体
方法签名 = 方法名+参数列表
方法签名就是识别方法的关键字，在一个类中不可以定义方法签名相同的方法，方法的重复与否
和访问控制修符、返回值类型、方法体没关系。
方法的重载就是方法名相同，方法签名不相同的一种现象。

4、方法的调用原则
Java采用极尽简单的转换原则，调用方法时如果招不到参数列表相匹配的方法，就调用
存储范围最近的参数列表
byte-->short-->int-->long

5、方法的传递规则
如果是基本类型的传参，是将变量的值传了进去，对于变量没有任何影响。
如果是引用类型的传参，是将引用类型变量存储的对象的地址进行了传参。
















