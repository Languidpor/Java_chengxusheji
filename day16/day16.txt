static final 联合起来修饰一个属性，表示一个常量，一般大写。

1、抽象类
是一种特殊的类型，一般来讲，抽象类都有抽象方法(也可以没有抽象方法)，但是反过来，只要有抽象方法
的类，就一定是抽象类。抽象类不能实例化，但是其引用可以指向子类的对象，抽象类一般都有子类，
而子类需要去实现它的抽象方法，除非子类也是一个抽象类。

抽象类的意义：为其棋类提供一个共有的类型，封装了子类中的重复的内容，定义有抽象的方法，子类
有实现，虽然说实现的逻辑可能不同，但是方法的定义是一致的。

总结：
1）抽象类不能实例化
2）abstract修饰的方法是抽象方法，不能有方法体
3）包含抽象方法的类一定是抽象类
4）使用抽象的概念可以定义引用类型，指向其子类对象
5）抽象类可以被继承，子类需要实现抽象类的抽象方法，除非子类也是抽象类。

2、接口
是一个特殊的抽象类，有以下特点
1）接口的所有方法都是抽象方法
   (方法前就不需要abstract了，写上也行，接口的定义使用interface而不是class)
   
2）接口中的属性都是静态常量(也不需要用static final修饰)

3）接口没有构造方法  思考：抽象类有没有构造方法呢？
抽象类是可以有构造的，是为了让子类的构造去调用，才能妥善的初始化父类的那些属性，
以便于子类来继承。

4）一个类可以实现一个接口也可以实现多个接口

5）接口和接口之间可以有继承关系

总结：
接口的意义：单一继承关系的补充，即一个类只能有一个父类，这使得java的继承结构是一个
树状结构，这种结构从某种程度上使得java的继承逻辑比较清晰，降低了程序难度，但是有一定
的局限性，当希望一个类具备多个父类的功能时，就无法实现，而接口可以补缺这个不足之处，
即一个类可以实现多个接口。

接口还有一个优势：可以借助接口将服务的使用者和提供者分离开，这样可以有效的降低耦合度，
在一个业务中，服务的使用者和提供者不再直接通信，而是借助接口去传递信息。


顾客(使用者) ---- 服务员(接口)  ----   厨师(提供者)

服务员是接口，厨师是接口的实现类。

3、面向接口编程
在软件的价格设计上，提出的新的架构理念，叫做面向接口，也叫做面向抽象，指软件系统的整体架构
基于底层抽象，使得底层和上层都依赖于抽象，这样更稳定。

4、练习
案例1、栈是一种数据结构，其特点是存储数据时满足”先进后出”的原则，写一个类描述这个数据结构，要求底层由数组进行实现，对外提供入栈push（Object obj），出现pop（）的功能，并可以查看栈内元素个数。

案例2、银行卡系统
 问题描述：
1、银联接口（unionpay）
   用于描述银联统一制定的规则，包括检测密码，取钱，查询余额（checkPwd，drawMoney，getBalance）
2、工商银行接口（ICBC）
    用于描述工商银行卡的功能，满足银联接口的同时，还提供在线支付的功能（payOnline）
3、农业银行接口（ABC）
       用于描述农业银行卡的功能，满足银联接口的同时，还提供支付话费的功能，另外卡内余额最大可以透支2000（payTelBill）
4、定义实现类测试上面的接口

案例3、根据周长计算不同图形的面积。
问题描述：
1、计算各种图形的面积，并比较各种图形面积的最大值（周长相同时，谁的面积大）
2、使用抽象类及其子类的方式实现本案例
3、本案例以圆形和正方形为例
正方形的面积：0.0625*c*c
圆形的面积：0.0796*c*c     c为周长
正方形类：  Square   
圆形类：Circle
父类：Shape








