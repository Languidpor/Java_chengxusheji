1)成员内部类(实例内部类)
2)局部内部类(方法内部类)
3)静态内部类
4)匿名内部类



2、局部内部类(方法的内部)： 使用情况很少
2.1、定义在外部类的方法里面，局部内部类只是在该方法中可见，外部不可见。
2.2、不能使用访问控制修饰符
2.3、不能使用static
2.4、可以访问该方法中的final修饰的变量，非final修饰的变量不能访问
2.5、可以访问外部类的成员(属性),如果外部类的属性和内部类的属性名相同，就用"外部类名.this.属性名"的方式访问

为什么不可以访问方法中的非final修饰的变量：内部类使用外部类的方法的属性时，实际上是内部类
的对象在访问它，内部类的对象在整个生命周期内都有可能调用它，为了保证数据的一致性，不至于
内部类访问了变换了的数据，所以规定不可以访问非final变量。
JDK1.8之后，在内部类中可以访问非final修饰的变量，只需要保证不被修改就可以了。



3、静态内部类
3.1、静态内部类可以直接访问外部类的静态成员
3.2、静态内部类不能直接访问外部类的非静态成员，但是可以通过new 外部类().成员的方式访问.
3.3、如果外部类的静态成员和内部类的成员名称相同，可以通过"外部类名.属性名"的方式访问，
若名称不相同，可以直接通过"成员名"的方式进行访问
3.4、创建静态内部类的对象时，不需要依赖于外部类的对象
语法：  内部类名 对象名 = new 内部类名()
3.5、四种访问控制修饰符都可以使用

4、匿名内部类：最重要，用的最多，最难理解，最好用
有一种场景，需要一个类的对象，而且只需要一次，以后不会再需要这个对象，而且使用这个对象时，
仅仅需要其一个功能，这个功能一般情况下是在接口或者抽象类中的一个规定。











